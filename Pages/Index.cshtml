@page
@model IndexModel

<div class="container">
    <div class="row mt-3">
        <div class="col-12 d-flex justify-content-between align-items-center">
            <h5>Current File: <span id="currentFile">None</span></h5>
            <div>
                <span class="badge bg-secondary" id="videoStatus"></span>
                <button id="cancelButton" class="btn btn-danger ms-2" onclick="cancelTask()" disabled>Cancel Task</button>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-12">
            <h3>Processing Logs <span class="badge bg-secondary" id="lastUpdate"></span></h3>
            <pre id="logContainer" style="white-space: pre-wrap;">@Model.LogContent</pre>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        let isUpdating = false;
        let currentTask = null;

        async function updateLogs() {
            if (isUpdating) return;
            isUpdating = true;

            try {
                const response = await fetch('?handler=Logs');
                const logs = await response.text();
                document.getElementById('logContainer').textContent = logs;
                document.getElementById('lastUpdate').textContent = new Date().toLocaleTimeString('en-GB', { hour: '2-digit', minute: '2-digit', second: '2-digit' });

                // Update current file and task status
                const taskResponse = await fetch('?handler=CurrentTask');
                const taskData = await taskResponse.json();
                currentTask = taskData;
                document.getElementById('currentFile').textContent = taskData.filename || 'None';
                document.getElementById('cancelButton').disabled = !taskData.isRunning;
                document.getElementById('videoStatus').textContent = taskData.status;
            } catch (error) {
                console.error('Error fetching logs or task status:', error);
            } finally {
                isUpdating = false;
            }
        }

        async function cancelTask() {
            if (!currentTask || !currentTask.isRunning) return;

            try {
                await fetch('?handler=CancelTask');
                document.getElementById('cancelButton').disabled = true;
            } catch (error) {
                console.error('Error canceling task:', error);
            }
        }

        // Initial load
        updateLogs();

        // Smooth polling with requestAnimationFrame
        function poll() {
            updateLogs().then(() => {
                setTimeout(() => requestAnimationFrame(poll), 2000);
            });
        }

        requestAnimationFrame(poll);
    </script>
}